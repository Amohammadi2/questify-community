openapi: 3.0.3
info:
  title: Questify
  version: 1.0.0-alpha
  description: The ultimate question and answer platform
paths:
  /api/v1/answers/:
    post:
      operationId: answers_create
      tags:
      - answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerWriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnswerWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnswerWriteRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerWrite'
          description: ''
  /api/v1/answers/{id}/:
    get:
      operationId: answers_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerRead'
          description: ''
    put:
      operationId: answers_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerWriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnswerWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnswerWriteRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerWrite'
          description: ''
    patch:
      operationId: answers_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAnswerWriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAnswerWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAnswerWriteRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerWrite'
          description: ''
    delete:
      operationId: answers_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/answers/{id}/accept/:
    post:
      operationId: answers_accept_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptAnswerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AcceptAnswerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AcceptAnswerRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerWrite'
          description: ''
  /api/v1/answers/for_question/:
    get:
      operationId: answers_for_question_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: qid
        schema:
          type: integer
        required: true
      tags:
      - answers
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAnswerReadList'
          description: ''
  /api/v1/answers/my_answers/:
    get:
      operationId: answers_my_answers_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - answers
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMyAnswersList'
          description: ''
  /api/v1/questions/:
    get:
      operationId: questions_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - questions
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedQuestionReadList'
          description: ''
    post:
      operationId: questions_create
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionWriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionWriteRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionWrite'
          description: ''
  /api/v1/questions/{id}/:
    get:
      operationId: questions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionRead'
          description: ''
    put:
      operationId: questions_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionWriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionWriteRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionWrite'
          description: ''
    patch:
      operationId: questions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestionWriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedQuestionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestionWriteRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionWrite'
          description: ''
    delete:
      operationId: questions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/questions/my_questions/:
    get:
      operationId: questions_my_questions_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - questions
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedQuestionReadList'
          description: ''
  /api/v1/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/v1/token/obtain/:
    post:
      operationId: token_obtain_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/users/:
    post:
      operationId: users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/v1/users/{id}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRetrieve'
          description: ''
    delete:
      operationId: users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/me/:
    get:
      operationId: users_me_retrieve
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRetrieve'
          description: ''
components:
  schemas:
    AcceptAnswerRequest:
      type: object
      properties:
        accepted:
          type: boolean
    AnswerRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        html_content:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        accepted:
          type: boolean
      required:
      - author
      - created
      - html_content
      - id
      - updated
    AnswerWrite:
      type: object
      properties:
        html_content:
          type: string
        question:
          type: integer
          nullable: true
        id:
          type: integer
          readOnly: true
      required:
      - html_content
      - id
    AnswerWriteRequest:
      type: object
      properties:
        html_content:
          type: string
          minLength: 1
        question:
          type: integer
          nullable: true
      required:
      - html_content
    Author:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        id:
          type: integer
          readOnly: true
      required:
      - id
      - username
    MyAnswers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        html_content:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        accepted:
          type: boolean
        question:
          $ref: '#/components/schemas/QuestionBrief'
      required:
      - author
      - created
      - html_content
      - id
      - question
      - updated
    PaginatedAnswerReadList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/AnswerRead'
    PaginatedMyAnswersList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/MyAnswers'
    PaginatedQuestionReadList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/QuestionRead'
    PatchedAnswerWriteRequest:
      type: object
      properties:
        html_content:
          type: string
          minLength: 1
        question:
          type: integer
          nullable: true
    PatchedQuestionWriteRequest:
      type: object
      properties:
        html_content:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        tags:
          type: array
          items:
            type: string
            minLength: 1
    QuestionBrief:
      type: object
      properties:
        title:
          type: string
        id:
          type: integer
          readOnly: true
      required:
      - id
      - title
    QuestionRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        html_content:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
        tags:
          type: array
          items:
            type: string
        num_answers:
          type: integer
        has_accepted_answer:
          type: boolean
      required:
      - author
      - created
      - has_accepted_answer
      - html_content
      - id
      - num_answers
      - tags
      - title
      - updated
    QuestionWrite:
      type: object
      properties:
        html_content:
          type: string
        title:
          type: string
        tags:
          type: array
          items:
            type: string
        id:
          type: integer
          readOnly: true
      required:
      - html_content
      - id
      - tags
      - title
    QuestionWriteRequest:
      type: object
      properties:
        html_content:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        tags:
          type: array
          items:
            type: string
            minLength: 1
      required:
      - html_content
      - tags
      - title
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    UserRegistration:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          maxLength: 128
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - password
      - username
    UserRegistrationRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          minLength: 1
          maxLength: 128
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - password
      - username
    UserRetrieve:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
