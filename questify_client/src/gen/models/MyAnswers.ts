/* tslint:disable */
/* eslint-disable */
/**
 * Questify
 * The ultimate question and answer platform
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Author } from './Author';
import {
    AuthorFromJSON,
    AuthorFromJSONTyped,
    AuthorToJSON,
} from './Author';
import type { QuestionBrief } from './QuestionBrief';
import {
    QuestionBriefFromJSON,
    QuestionBriefFromJSONTyped,
    QuestionBriefToJSON,
} from './QuestionBrief';

/**
 * 
 * @export
 * @interface MyAnswers
 */
export interface MyAnswers {
    /**
     * 
     * @type {number}
     * @memberof MyAnswers
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof MyAnswers
     */
    htmlContent: string;
    /**
     * 
     * @type {Author}
     * @memberof MyAnswers
     */
    author: Author;
    /**
     * 
     * @type {Date}
     * @memberof MyAnswers
     */
    readonly created: Date;
    /**
     * 
     * @type {Date}
     * @memberof MyAnswers
     */
    readonly updated: Date;
    /**
     * 
     * @type {boolean}
     * @memberof MyAnswers
     */
    accepted?: boolean;
    /**
     * 
     * @type {QuestionBrief}
     * @memberof MyAnswers
     */
    question: QuestionBrief;
}

/**
 * Check if a given object implements the MyAnswers interface.
 */
export function instanceOfMyAnswers(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "htmlContent" in value;
    isInstance = isInstance && "author" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "question" in value;

    return isInstance;
}

export function MyAnswersFromJSON(json: any): MyAnswers {
    return MyAnswersFromJSONTyped(json, false);
}

export function MyAnswersFromJSONTyped(json: any, ignoreDiscriminator: boolean): MyAnswers {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'htmlContent': json['html_content'],
        'author': AuthorFromJSON(json['author']),
        'created': (new Date(json['created'])),
        'updated': (new Date(json['updated'])),
        'accepted': !exists(json, 'accepted') ? undefined : json['accepted'],
        'question': QuestionBriefFromJSON(json['question']),
    };
}

export function MyAnswersToJSON(value?: MyAnswers | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'html_content': value.htmlContent,
        'author': AuthorToJSON(value.author),
        'accepted': value.accepted,
        'question': QuestionBriefToJSON(value.question),
    };
}

