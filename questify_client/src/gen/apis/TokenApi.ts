/* tslint:disable */
/* eslint-disable */
/**
 * Questify
 * The ultimate question and answer platform
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TokenObtainPair,
  TokenObtainPairRequest,
  VerifiedTokenRefresh,
  VerifiedTokenRefreshRequest,
} from '../models';
import {
    TokenObtainPairFromJSON,
    TokenObtainPairToJSON,
    TokenObtainPairRequestFromJSON,
    TokenObtainPairRequestToJSON,
    VerifiedTokenRefreshFromJSON,
    VerifiedTokenRefreshToJSON,
    VerifiedTokenRefreshRequestFromJSON,
    VerifiedTokenRefreshRequestToJSON,
} from '../models';

export interface TokenObtainCreateRequest {
    tokenObtainPairRequest: TokenObtainPairRequest;
}

export interface TokenRefreshCreateRequest {
    verifiedTokenRefreshRequest: VerifiedTokenRefreshRequest;
}

/**
 * 
 */
export class TokenApi extends runtime.BaseAPI {

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     */
    async tokenObtainCreateRaw(requestParameters: TokenObtainCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenObtainPair>> {
        if (requestParameters.tokenObtainPairRequest === null || requestParameters.tokenObtainPairRequest === undefined) {
            throw new runtime.RequiredError('tokenObtainPairRequest','Required parameter requestParameters.tokenObtainPairRequest was null or undefined when calling tokenObtainCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/token/obtain/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenObtainPairRequestToJSON(requestParameters.tokenObtainPairRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenObtainPairFromJSON(jsonValue));
    }

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     */
    async tokenObtainCreate(requestParameters: TokenObtainCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenObtainPair> {
        const response = await this.tokenObtainCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     */
    async tokenRefreshCreateRaw(requestParameters: TokenRefreshCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifiedTokenRefresh>> {
        if (requestParameters.verifiedTokenRefreshRequest === null || requestParameters.verifiedTokenRefreshRequest === undefined) {
            throw new runtime.RequiredError('verifiedTokenRefreshRequest','Required parameter requestParameters.verifiedTokenRefreshRequest was null or undefined when calling tokenRefreshCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/token/refresh/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifiedTokenRefreshRequestToJSON(requestParameters.verifiedTokenRefreshRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifiedTokenRefreshFromJSON(jsonValue));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     */
    async tokenRefreshCreate(requestParameters: TokenRefreshCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifiedTokenRefresh> {
        const response = await this.tokenRefreshCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
