/* tslint:disable */
/* eslint-disable */
/**
 * Questify
 * The ultimate question and answer platform
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedQuestionReadList,
  PatchedQuestionWriteRequest,
  QuestionRead,
  QuestionWrite,
  QuestionWriteRequest,
  SubscribeOk,
  SubscribeRequestRequest,
} from '../models';
import {
    PaginatedQuestionReadListFromJSON,
    PaginatedQuestionReadListToJSON,
    PatchedQuestionWriteRequestFromJSON,
    PatchedQuestionWriteRequestToJSON,
    QuestionReadFromJSON,
    QuestionReadToJSON,
    QuestionWriteFromJSON,
    QuestionWriteToJSON,
    QuestionWriteRequestFromJSON,
    QuestionWriteRequestToJSON,
    SubscribeOkFromJSON,
    SubscribeOkToJSON,
    SubscribeRequestRequestFromJSON,
    SubscribeRequestRequestToJSON,
} from '../models';

export interface QuestionsCreateRequest {
    questionWriteRequest: QuestionWriteRequest;
}

export interface QuestionsDestroyRequest {
    id: number;
}

export interface QuestionsListRequest {
    limit?: number;
    offset?: number;
}

export interface QuestionsMyQuestionsListRequest {
    limit?: number;
    offset?: number;
}

export interface QuestionsPartialUpdateRequest {
    id: number;
    patchedQuestionWriteRequest?: PatchedQuestionWriteRequest;
}

export interface QuestionsRetrieveRequest {
    id: number;
}

export interface QuestionsSubscribeCreateRequest {
    id: number;
    subscribeRequestRequest: SubscribeRequestRequest;
}

export interface QuestionsUpdateRequest {
    id: number;
    questionWriteRequest: QuestionWriteRequest;
}

/**
 * 
 */
export class QuestionsApi extends runtime.BaseAPI {

    /**
     */
    async questionsCreateRaw(requestParameters: QuestionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionWrite>> {
        if (requestParameters.questionWriteRequest === null || requestParameters.questionWriteRequest === undefined) {
            throw new runtime.RequiredError('questionWriteRequest','Required parameter requestParameters.questionWriteRequest was null or undefined when calling questionsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/questions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionWriteRequestToJSON(requestParameters.questionWriteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionWriteFromJSON(jsonValue));
    }

    /**
     */
    async questionsCreate(requestParameters: QuestionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionWrite> {
        const response = await this.questionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionsDestroyRaw(requestParameters: QuestionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling questionsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/questions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async questionsDestroy(requestParameters: QuestionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.questionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async questionsListRaw(requestParameters: QuestionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedQuestionReadList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/questions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQuestionReadListFromJSON(jsonValue));
    }

    /**
     */
    async questionsList(requestParameters: QuestionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedQuestionReadList> {
        const response = await this.questionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionsMyQuestionsListRaw(requestParameters: QuestionsMyQuestionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedQuestionReadList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/questions/my_questions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedQuestionReadListFromJSON(jsonValue));
    }

    /**
     */
    async questionsMyQuestionsList(requestParameters: QuestionsMyQuestionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedQuestionReadList> {
        const response = await this.questionsMyQuestionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionsPartialUpdateRaw(requestParameters: QuestionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionWrite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling questionsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/questions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedQuestionWriteRequestToJSON(requestParameters.patchedQuestionWriteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionWriteFromJSON(jsonValue));
    }

    /**
     */
    async questionsPartialUpdate(requestParameters: QuestionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionWrite> {
        const response = await this.questionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionsRetrieveRaw(requestParameters: QuestionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionRead>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling questionsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/questions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionReadFromJSON(jsonValue));
    }

    /**
     */
    async questionsRetrieve(requestParameters: QuestionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionRead> {
        const response = await this.questionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionsSubscribeCreateRaw(requestParameters: QuestionsSubscribeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscribeOk>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling questionsSubscribeCreate.');
        }

        if (requestParameters.subscribeRequestRequest === null || requestParameters.subscribeRequestRequest === undefined) {
            throw new runtime.RequiredError('subscribeRequestRequest','Required parameter requestParameters.subscribeRequestRequest was null or undefined when calling questionsSubscribeCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/questions/{id}/subscribe/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscribeRequestRequestToJSON(requestParameters.subscribeRequestRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscribeOkFromJSON(jsonValue));
    }

    /**
     */
    async questionsSubscribeCreate(requestParameters: QuestionsSubscribeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscribeOk> {
        const response = await this.questionsSubscribeCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionsUpdateRaw(requestParameters: QuestionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionWrite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling questionsUpdate.');
        }

        if (requestParameters.questionWriteRequest === null || requestParameters.questionWriteRequest === undefined) {
            throw new runtime.RequiredError('questionWriteRequest','Required parameter requestParameters.questionWriteRequest was null or undefined when calling questionsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/questions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionWriteRequestToJSON(requestParameters.questionWriteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionWriteFromJSON(jsonValue));
    }

    /**
     */
    async questionsUpdate(requestParameters: QuestionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionWrite> {
        const response = await this.questionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
