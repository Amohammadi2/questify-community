/* tslint:disable */
/* eslint-disable */
/**
 * Questify
 * The ultimate question and answer platform
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcceptAnswerRequest,
  AnswerRead,
  AnswerWrite,
  AnswerWriteRequest,
  PaginatedAnswerReadList,
  PaginatedMyAnswersList,
  PatchedAnswerWriteRequest,
} from '../models';
import {
    AcceptAnswerRequestFromJSON,
    AcceptAnswerRequestToJSON,
    AnswerReadFromJSON,
    AnswerReadToJSON,
    AnswerWriteFromJSON,
    AnswerWriteToJSON,
    AnswerWriteRequestFromJSON,
    AnswerWriteRequestToJSON,
    PaginatedAnswerReadListFromJSON,
    PaginatedAnswerReadListToJSON,
    PaginatedMyAnswersListFromJSON,
    PaginatedMyAnswersListToJSON,
    PatchedAnswerWriteRequestFromJSON,
    PatchedAnswerWriteRequestToJSON,
} from '../models';

export interface AnswersAcceptCreateRequest {
    id: number;
    acceptAnswerRequest?: AcceptAnswerRequest;
}

export interface AnswersCreateRequest {
    answerWriteRequest: AnswerWriteRequest;
}

export interface AnswersDestroyRequest {
    id: number;
}

export interface AnswersForQuestionListRequest {
    qid: number;
    limit?: number;
    offset?: number;
}

export interface AnswersMyAnswersListRequest {
    limit?: number;
    offset?: number;
}

export interface AnswersPartialUpdateRequest {
    id: number;
    patchedAnswerWriteRequest?: PatchedAnswerWriteRequest;
}

export interface AnswersRetrieveRequest {
    id: number;
}

export interface AnswersUpdateRequest {
    id: number;
    answerWriteRequest: AnswerWriteRequest;
}

/**
 * 
 */
export class AnswersApi extends runtime.BaseAPI {

    /**
     */
    async answersAcceptCreateRaw(requestParameters: AnswersAcceptCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerRead>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling answersAcceptCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/answers/{id}/accept/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptAnswerRequestToJSON(requestParameters.acceptAnswerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerReadFromJSON(jsonValue));
    }

    /**
     */
    async answersAcceptCreate(requestParameters: AnswersAcceptCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerRead> {
        const response = await this.answersAcceptCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async answersCreateRaw(requestParameters: AnswersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerWrite>> {
        if (requestParameters.answerWriteRequest === null || requestParameters.answerWriteRequest === undefined) {
            throw new runtime.RequiredError('answerWriteRequest','Required parameter requestParameters.answerWriteRequest was null or undefined when calling answersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/answers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnswerWriteRequestToJSON(requestParameters.answerWriteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerWriteFromJSON(jsonValue));
    }

    /**
     */
    async answersCreate(requestParameters: AnswersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerWrite> {
        const response = await this.answersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async answersDestroyRaw(requestParameters: AnswersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling answersDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/answers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async answersDestroy(requestParameters: AnswersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.answersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async answersForQuestionListRaw(requestParameters: AnswersForQuestionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAnswerReadList>> {
        if (requestParameters.qid === null || requestParameters.qid === undefined) {
            throw new runtime.RequiredError('qid','Required parameter requestParameters.qid was null or undefined when calling answersForQuestionList.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.qid !== undefined) {
            queryParameters['qid'] = requestParameters.qid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/answers/for_question/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAnswerReadListFromJSON(jsonValue));
    }

    /**
     */
    async answersForQuestionList(requestParameters: AnswersForQuestionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAnswerReadList> {
        const response = await this.answersForQuestionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async answersMyAnswersListRaw(requestParameters: AnswersMyAnswersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedMyAnswersList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/answers/my_answers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedMyAnswersListFromJSON(jsonValue));
    }

    /**
     */
    async answersMyAnswersList(requestParameters: AnswersMyAnswersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedMyAnswersList> {
        const response = await this.answersMyAnswersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async answersPartialUpdateRaw(requestParameters: AnswersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerWrite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling answersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/answers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAnswerWriteRequestToJSON(requestParameters.patchedAnswerWriteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerWriteFromJSON(jsonValue));
    }

    /**
     */
    async answersPartialUpdate(requestParameters: AnswersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerWrite> {
        const response = await this.answersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async answersRetrieveRaw(requestParameters: AnswersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerRead>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling answersRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/answers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerReadFromJSON(jsonValue));
    }

    /**
     */
    async answersRetrieve(requestParameters: AnswersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerRead> {
        const response = await this.answersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async answersUpdateRaw(requestParameters: AnswersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerWrite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling answersUpdate.');
        }

        if (requestParameters.answerWriteRequest === null || requestParameters.answerWriteRequest === undefined) {
            throw new runtime.RequiredError('answerWriteRequest','Required parameter requestParameters.answerWriteRequest was null or undefined when calling answersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/answers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnswerWriteRequestToJSON(requestParameters.answerWriteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerWriteFromJSON(jsonValue));
    }

    /**
     */
    async answersUpdate(requestParameters: AnswersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerWrite> {
        const response = await this.answersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
