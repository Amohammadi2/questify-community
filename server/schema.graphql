
interface Node { 
    uid: String!
}
type Query { 
    me: User
}
type Mutation { 
    login(username: String!, password: String!): LoginDataResult!
    verifyToken(token: String): BinResult!
    createPost(input: CreatePostInput!): PostResult!
}

#region API Result spec
type BinResult { 
    ok: Boolean!
    error: ErrorInfo
}
type ErrorInfo { 
    message: String
    code: String
}
type PageInfo { 
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    endCursor: String
    totalCount: Int
}

#endregion Relay pagination spec

#region auth
type LoginData { 
    token: String
}

#endregion auth
#region User
type User { 
    uid: String!
    username: String!
    role: Role!
    firstName: String
    lastName: String
    email: String
    posts: [Post!]!
}

#endregion User
#region Post Types
type Post implements Node { 
    uid: String!
    author: User!
    title: String!
    segments: [PostSegment!]!
    tags: [String!]!
}
type PostSegment { 
    content: String
    type: PostSegmentType!
}
#endregion Post Types


#region Create Post
input CreatePostInput { 
    author: String!
    title: String!
    summery: String!
    segments: [CreatePostSegmentInput!]!
    tags: [String!]!
}
input CreatePostSegmentInput { 
    content: String!
    type: PostSegmentType!
}
enum Role { 
    MANAGER
    TEACHER
    STUDENT
}
enum PostSegmentType { 
    TEXT
    FILE
    IMAGE
}
type LoginDataResult { 
    ok: Boolean!
    error: ErrorInfo
    data: LoginData
}
type PostResult { 
    ok: Boolean!
    error: ErrorInfo
    data: Post
}